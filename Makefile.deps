.PHONY: sudo deps-install deps-uninstall deps-start deps-stop prepare-nginx wait-postgresql prepare-postgresql resize resize-postgresql delete delete-postgresql


sudo:
	sudo -v


deps-install: sudo
ifeq ($(OS),Linux)
	sudo apt-get install redis-server
	sudo apt-get install nginx
	sudo apt-get install python3-dev libpq-dev postgresql postgresql-contrib
else ifeq ($(OS),Darwin)
	brew list redis > /dev/null || brew install redis --build-from-source  # FIXME: Homebrew/homebrew-core#11134
	brew list nginx > /dev/null || brew install nginx
	brew list postgresql > /dev/null || brew install postgresql
else
	echo 'ACITON REQUIRED) Need to install redis and nginx before this.'
endif


deps-uninstall: sudo
ifeq ($(OS),Linux)
	# TODO
	echo 'ACITON REQUIRED) Need to uninstall redis, nginx and postgresql after this.'
else ifeq ($(OS),Darwin)
	-brew list redis > /dev/null && brew uninstall redis
	-brew list nginx > /dev/null && brew uninstall nginx
	-brew list postgresql > /dev/null && brew uninstall postgresql
else
	echo 'ACITON REQUIRED) Need to uninstall redis, nginx and postgresql after this.'
endif


deps-start:
	# XXX: resudo for first-time user.
	sudo -k
	sudo -v
ifeq ($(OS),Linux)
	sudo service redis-server start
else ifeq ($(OS),Darwin)
	brew services run redis
else
	sudo redis-server &
endif
ifeq ($(OS),Linux)
	sudo service nginx start
else
	sudo nginx &
endif


deps-start-postgresql: deps-install  #[postgres]
ifeq ($(OS),Linux)
	sudo service postgresql start
else ifeq ($(OS),Darwin)
	brew services run postgresql
else
	# TODO
endif


deps-stop: sudo
ifeq ($(OS),Linux)
	sudo service nginx stop
else ifeq ($(OS),Darwin)
	-sudo killall -9 'nginx: master process nginx'
	-sudo killall -9 'nginx: worker process'
	-sudo killall -9 nginx
else
	-sudo killall -9 'nginx: master process nginx'
	-sudo killall -9 'nginx: worker process'
	-sudo killall -9 nginx
endif
ifeq ($(OS),Linux)
	-sudo service redis-server stop
else ifeq ($(OS),Darwin)
	-brew services stop redis
else
	-sudo killall -9 redis-server
endif
ifeq ($(OS),Linux)
	-sudo service postgresql stop
else ifeq ($(OS),Darwin)
	-brew services stop postgresql
else
	# TODO
endif


prepare-nginx: sudo nginx/local_nginx.conf
ifeq ($(OS),Linux)
	sudo rm -f /etc/nginx/sites-enabled/local_nginx.conf
	sudo ln -s `pwd`/nginx/local_nginx.conf /etc/nginx/sites-enabled/
else ifeq ($(OS),Darwin)
	rm -f /usr/local/etc/nginx/servers/local_nginx.conf
	ln -s `pwd`/nginx/local_nginx.conf /usr/local/etc/nginx/servers/
else
	# FIXME ln -s `pwd`/nginx/local_nginx.conf /usr/local/etc/nginx/servers/
endif


wait-postgresql:
	while ! pg_isready -h localhost -p 5432 -d postgres; do sleep 1; done
	sleep 1  # FIXME OMG!


export POSTGRES_USER=cnluser
export POSTGRES_PASSWORD=temporary
export POSTGRES_DB=codingnightlive


prepare-postgresql: sudo deps-start-postgresql wait-postgresql
	# TODO FAILSAFE (RECALLABLE)
ifeq ($(OS),Linux)
	sudo su postgres -c 'createdb $(POSTGRES_DB)'
	sudo -u postgres psql -c "CREATE USER $(POSTGRES_USER) WITH PASSWORD '$(POSTGRES_PASSWORD)';"
	sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $(POSTGRES_DB) TO $(POSTGRES_USER);"
	sudo -u postgres -E ./postgres/init_sql.sh
else ifeq ($(OS),Darwin)
	psql -c "CREATE DATABASE $(POSTGRES_DB)" -d postgres
	psql -c "CREATE USER $(POSTGRES_USER) WITH PASSWORD '$(POSTGRES_PASSWORD)';" -d postgres
	psql -c "GRANT ALL PRIVILEGES ON DATABASE $(POSTGRES_DB) TO $(POSTGRES_USER);" -d postgres
	./postgres/init_sql.sh
else
	# TODO
endif


resize resize-postgresql: sudo
ifeq ($(OS),Linux)
	sudo -u postgres psql $(POSTGRES_DB) -c "ALTER TABLE socialaccount_socialapp ALTER COLUMN name TYPE character varying(65);"
else ifeq ($(OS),Darwin)
	psql $(POSTGRES_DB) -c "ALTER TABLE socialaccount_socialapp ALTER COLUMN name TYPE character varying(65);"
else
	# TODO
endif


delete delete-postgresql: sudo
ifeq ($(OS),Linux)
	-sudo su postgres -c 'dropdb $(POSTGRES_DB)'
	-sudo su postgres -c 'dropuser $(POSTGRES_USER)'
else ifeq ($(OS),Darwin)
	-psql -c 'drop database $(POSTGRES_DB)' -d postgres
	-psql -c 'drop user $(POSTGRES_USER)' -d postgres
else
	# TODO
endif
